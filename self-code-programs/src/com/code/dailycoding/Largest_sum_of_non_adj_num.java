package com.code.dailycoding;

/**
 * This problem was asked by Airbnb.
 * Given a list of integers, write a function that returns 
 * the largest sum of non-adjacent numbers. Numbers can be 0 or negative.
 * For example, [2, 4, 6, 2, 5] should return 13, since we pick 2, 6, and 5.
 * [5, 1, 1, 5] should return 10, since we pick 5 and 5.
 * 
 * Follow-up: Can you do this in O(N) time and constant space?
 */
public class Largest_sum_of_non_adj_num {

	static int count = 0;
	static Integer[] memo; 
	
	public static void main(String[] args) {
		int[] array = new int[]{5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,
				                5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,
				                5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,
				                5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,
				                5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1
		};
		long t1 = System.nanoTime();
		//System.out.println(largest_sum(array1, 0));
		long t2 = System.nanoTime();
		long time = (t2-t1)/array.length;
		//System.out.println("Time "+time);
		
		System.out.println("\n");
		
		t1 = System.nanoTime();
		System.out.println(memoized_largest_sum(array, 0));
		t2 = System.nanoTime();
		time = (t2-t1)/array.length;
		System.out.println("Time, Memoized "+time);

	}
	
	public static int memoized_largest_sum(int[] arr, int index){
		if(memo==null){
			memo = new Integer[arr.length];
		}
		if(memo[index]!=null){
			return memo[index];
		}
		
		int size = arr.length;
		if(size-index==1){
			return arr[index];
		}else if(size-index==2){
			return Math.max(arr[index], arr[index+1]);
		}
		
		int sum1 = arr[index] + memoized_largest_sum(arr, index+2);
		int sum2 = arr[index+1];
		if(index+3<size){
			sum2 += memoized_largest_sum(arr, index+3);
		}
		
		int sum = Math.max(sum1, sum2);
		memo[index] = sum;
		return sum;
	}
	
	public static int largest_sum(int[] arr, int index){
		int size = arr.length;
		if(size-index==1){
			return arr[index];
		}else if(size-index==2){
			return Math.max(arr[index], arr[index+1]);
		}
		
		int sum1 = arr[index] + largest_sum(arr, index+2);
		int sum2 = arr[index+1];
		if(index+3<size){
			sum2 += largest_sum(arr, index+3);
		}
		
		return Math.max(sum1, sum2);
	}

}

class MaximumSum
{
    /*Function to return max sum such that no two elements
      are adjacent */
    int FindMaxSum(int arr[], int n)
    {
        int incl = arr[0];
        int excl = 0;
        int excl_new;
        int i;
 
        for (i = 1; i < n; i++)
        {
             //current max excluding i 
            excl_new = (incl > excl) ? incl : excl;
 
             //current max including i 
            incl = excl + arr[i];
            excl = excl_new;
        }
 
         //return max of incl and excl 
        return ((incl > excl) ? incl : excl);
    }
 
    // Driver program to test above functions
    public static void main(String[] args)
    {
        MaximumSum sum = new MaximumSum();
        int array[] = new int[]{5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,
        		                 5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,
        		                 5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,
        		                 5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,
        		                 5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1,5,5,10,100,10,5,2,1,4,6,2,5,5,1,1,5,100,10,5,2,1,10,5,2,1,4,6,2,5,5,1,1,10,5,2,1,4,6,2,5,5,1,1
        };
        
		long t1 = System.nanoTime();
		System.out.println(sum.FindMaxSum(array, array.length));
		long t2 = System.nanoTime();
		long time = (t2-t1)/array.length;
		System.out.println("Time "+time);
    }
}
